# General Guidelines : 
**General Guidelines for C/C++ Projects**

1. **Read the README**  
   Start by reading the project's README file on GitHub. It contains important instructions for installation, usage, and project-specific details.  

2. **Check Dependencies**  
   Look for dependencies listed in the README or package management files like `CMakeLists.txt` (for CMake), `Makefile` (for Make), or `vcpkg.json` (for vcpkg). Ensure the required compiler and libraries are installed.  

3. **Build Tool**  
   Identify the build tool the project is using: Make, CMake, or another. This information should be available in the README or through project configuration files (e.g., `Makefile` for Make, `CMakeLists.txt` for CMake).  

4. **Build the Project**  
   Depending on the build tool, use the appropriate commands to build the project:  

   - For Make:  
     ```  
     make  
     ```  
   - For CMake:  
     ```  
     mkdir build  
     cd build  
     cmake ..  
     make  
     ```  

5. **Configuration**  
   Check if the project requires configuration files (e.g., `.conf` files, `config.h` headers) to be set up. This may involve providing paths to dependencies or setting compilation flags.  

6. **Run Tests (if available)**  
   If the project provides tests, it's a good idea to run them to ensure everything is working correctly. Common testing frameworks for C/C++ include Google Test (gtest), Catch2, and Boost.Test.  
   - For Google Test:  
     ```  
     ./path/to/test_executable  
     ```  
   - For Catch2:  
     ```  
     ./path/to/test_executable  
     ```  

7. **Run the Project**  
   Follow the instructions in the README to run the project. This could involve running a specific executable, starting a server, or executing a specific command.  

8. **Troubleshooting**  
   If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues.  

9. **Documentation**  
   Review additional documentation such as Doxygen files, API documentation, or inline comments in the code. Understanding the documentation provides better insights into the projectâ€™s structure and usage.